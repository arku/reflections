What happens when you initialize a repository? Why do you need to do it?

	A git directory is created in the working directory. You have to initialize a git repository to let Git know that it has to track the files in the working directory.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is an intermediary between the working directory and the repository. Before commiting, files in the working directory are added to a staging area(a temporary place).

How can you use the staging area to make sure you have one commit per logical change?
		Using git diff --staged compares the changes made to the staging area with the latest commit. With the help of this, we can track the changes made to the staging area. So, its always a good idea to run git diff --staged after adding a file to the staging area to make surewe have one commit per logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Say, if I have a working application and I would like to add a new feature to the application but I am unsure of whether the feature will work or not. Also I wouldn't want to break the working application by adding code which doen't work. So, to maintain the history clear, creating a new branch would be useful. If the feature works, we can merge the newly-created branch with the master branch.


How do the diagrams help you visualize the branch structure?
			With the help of visualizing the branch structure, we can see which branches exist and where they branch from the master. Also, we can know which commits are unreachable from any of the branches. We can understand the non-linearity of commits pretty easily by drawing diagrams.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
		After working on an experimental feature, we might want to include the feature to our master branch. git merge does that exactly. It comnbines the commits to the recently checked out branch. After merging, there is no need for the experimental branch since we can reach thr commits from the master. So we can delete the branch. The digram helps to find the state of the files before they were merged which can be really helpful if we want to make some changes to the merged code.
